# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout
#% macro, ADDR, Asyn Port address
#% macro, GAIN, Voltage range selection
#% macro, INVERT, If 1 then multiply output signals by -1
#% macro, MASTER_SITE, The location of the card that sets the clock \
# (this may require setting /etc/acq400/n/peers)
#% macro, AGGREGATION_SITES, A comma seperated list of sites to read from

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, dtacq_adc.edl, P=$(P),R=$(R)

include "ADBase.template"

###################################################################
#  These records expose the gain control (voltage range)
###################################################################
# % autosave 2
record(mbbo, "$(P)$(R)RANGE") {
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RANGE")
   field(VAL, "$(GAIN=0)")
   field(ZRST, "+-10 V")
   field(ZRVL, "0")
   field(ONST, "+-5 V")
   field(ONVL, "1")
   field(TWST, "+-2.5 V")
   field(TWVL, "2")
   field(THST, "+-1.25 V")
   field(THVL, "3")
   field(PINI, "YES")
}

record(mbbi, "$(P)$(R)RANGE_RBV") {
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RANGE")
   field(SCAN, "I/O Intr")
   field(ZRST, "10 V")
   field(ZRVL, "0")
   field(ONST, "5 V")
   field(ONVL, "1")
   field(TWST, "2.5 V")
   field(TWVL, "2")
   field(THST, "1.25 V")
   field(THVL, "3")
}

###################################################################
#  These records control whether to invert input signal (+ve/-ve)
###################################################################
# % autosave 2
record(mbbo, "$(P)$(R)INVERT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))INVERT")
   field(VAL, "$(INVERT=0)")
   field(ZRST, "No")
   field(ZRVL, "0")
   field(ONST, "Yes")
   field(ONVL, "1")
   field(PINI, "YES")   
}

record(mbbi, "$(P)$(R)INVERT_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))INVERT")
   field(SCAN, "I/O Intr")
   field(ZRST, "No")
   field(ZRVL, "0")
   field(ONST, "Yes")
   field(ONVL, "1")
}

###################################################################
#  These records select the master site
###################################################################
record(longout, "$(P)$(R)MASTER_SITE")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))MASTER_SITE")
    field(VAL, "$(MASTER_SITE=1)")
    field(PINI, "YES")
}

record(longin, "$(P)$(R)MASTER_SITE_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))MASTER_SITE")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records set the aggregations sites
###################################################################
record(stringout, "$(P)$(R)AGGR_SITES")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))AGGR_SITES")
    field(VAL, "$(AGGREGATION_SITES='1')")
    field(PINI, "YES")
}

record(stringin, "$(P)$(R)AGGR_SITES_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))AGGR_SITES")
    field(SCAN, "I/O Intr")
}

###################################################################
#  areaDetector overrides
###################################################################
record(mbbo, "$(P)$(R)DataType")
{
    field(ZRST, "Int16")
    field(ZRVL, "2")
    field(ONST, "Int32")
    field(ONVL, "4")
    field(TWST, "")
    field(TWVL, "")
    field(THST, "")
    field(THVL, "")
    field(FRST, "")
    field(FRVL, "")
    field(FVST, "")
    field(FVVL, "")
    field(SXST, "")
    field(SXVL, "")
    field(SVST, "")
    field(SVVL, "")
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
    field(ZRST, "Int16")
    field(ZRVL, "2")
    field(ONST, "Int32")
    field(ONVL, "4")
    field(TWST, "")
    field(TWVL, "")
    field(THST, "")
    field(THVL, "")
    field(FRST, "")
    field(FRVL, "")
    field(FVST, "")
    field(FVVL, "")
    field(SXST, "")
    field(SXVL, "")
    field(SVST, "")
    field(SVVL, "")
}


###################################################################
#  Enable/disable sample count checking
###################################################################

record(bo, "$(P)$(R)ENABLE_HEADER")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))USE_SAMPLE_COUNT")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "$(P)$(R)ENABLE_HEADER_RBV")
{
    field(DTYP, "asynInt32")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))USE_SAMPLE_COUNT")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

###################################################################
#  Monitor flag for data loss detection
###################################################################

record(longout, "$(P)$(R)BAD_SAMPLES")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))BAD_ARRAY")
}

record(longin, "$(P)$(R)BAD_SAMPLES_RBV")
{
    field(DTYP, "asynInt32")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))BAD_ARRAY")
}